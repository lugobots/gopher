# MakeItPlay - The Dummies Go

[![GoDoc](https://godoc.org/github.com/makeitplay/the-dummies-go?status.svg)](https://godoc.org/github.com/makeitplay/the-dummies-go)
[![Go Report Card](https://goreportcard.com/badge/github.com/makeitplay/the-dummies-go)](https://goreportcard.com/report/github.com/makeitplay/the-dummies-go)

The Dummies Go is a [Go](http://golang.org/) implementation of a player (bot) for [MakeItPlay football](http://www.makeitplay.ai/football) game.

As this name suggest, **The Dummies** are not that smart, but they may play well enough to help you to test your bot.

### Documentation

* [API Reference](http://godoc.org/github.com/makeitplay/the-dummies-go)

### Requirements

0. Docker >= 18.03 (https://docs.docker.com/install/)
0. Docker Compose >= 1.21 (https://docs.docker.com/compose/install/)
0. Go Lang >= 1.10 (https://golang.org/doc/install)

### Usage

    You do not have to install The Dummies to make it runs and plays against your team.

    If you only wish to play with them, I recommend you run them as a Docker container:

Option A (recommended): Running the binary
    Terminal A - Start the game server:
    docker run -p 8080:8080 makeitplay/football

    Terminal B [The Dummies root directory] - Start the The Dummies team:
    `
    ./ play.sh home
    `
    Terminal C [another team OR The Dummies root directory] - Start the opponent team
    `
    ./play.sh away
    `

Option B: running docker-composer
    Terminal A
    ```
export team_image=makeitplay/the-dummies-go
export team_place=away
docker-compose up

    ```

    Terminal B:
    `
    ./play.sh home
    `

Option C: running docker and the other team as a conteriner

    Terminal A
    docker run -p 8080:8080 makeitplay/football

    Terminal B:
    ./play.sh home

    Terminal C:
    ./start-team-container.sh makeitplay/the-dummies-go away



    go get github.com/makeitplay/client-player-go

### Kick start

0. Copy [the example directory](./example) as a new Golang project
0. Build your bot executing the command below inside the project directory
    ```bash
    go build -o myAwesomeBot
    ```
0. Run the game server using the command
    ```bash
    docker run -p 8080:8080  makeitplay/football:1.0.0-alpha
    ```
0. You will need to spin up 22 process (11 as the home team players, and 11 as the away team players).

    You can do this manually executing the command `./myAwesomeBot -team=[home|away] -number=[1-11]`

    **or**

    You can use the shell script in the example directory to do this automatically for you.

**Note:** In this example above, both teams will have the same bots. You may download another bot
to play against your team (soon available at [MakeItPlay Docker Hub](https://hub.docker.com/r/makeitplay/))

### Deploying you bots (soon)

You will be able to create a Docker container with your player bot and share it with another developers.

See the Dockerfile template (not tested yet) in the example directory.




### Run for developing

0. docker run -p 8080:8080 makeitplay/football:1.0.0-alpha
0. go run main.go -team=away -number=1 -wshost=[you host machine IP]
0. ./play.sh [you host machine IP]

0. docker run -p 8080:8080 makeitplay/football:1.0.0-alpha
0. docker build -t the-dummies . --force-rm --no-cache
0. docker run the-dummies -team=away -number=1 -wshost=[you host machine IP]
0. play-containers.sh [you host machine IP]

### Run for deploy

docker build -t the-dummies . --no-cache
HOME_TEAM=the-dummies AWAY_TEAM=the-dummies docker-compose up  --force-recreate
HOME_TEAM=the-dummies AWAY_TEAM=the-dummies docker-compose build --no-cache


HOME_TEAM=the-dummies AWAY_TEAM=the-dummies docker-compose rm -f
docker network prune