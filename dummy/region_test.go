package dummy

import (
	"github.com/lovoo/goka/mock"
	"github.com/makeitplay/arena"
	"github.com/makeitplay/arena/physics"
	"github.com/makeitplay/client-player-go"
	"github.com/makeitplay/the-dummies-go/strategy"
	"github.com/stretchr/testify/assert"
	"testing"
)

// Mock generated by the command:
// mockgen -package=dummy  -destination=dummy/turn_ctx_test.go github.com/makeitplay/client-player-go GamerCtx,TurnContext

// findImpreciseRegionPoint finds a point ina  region based in a imprecise coord:
// example: to find a imprecise point in the region {3,2} pass the args 3.42 and 2.89
func findImpreciseRegionPoint(impreciseX, impreciseY float64) physics.Point {
	return physics.Point{
		PosX: int(float64(strategy.RegionWidth) * impreciseX),  //3
		PosY: int(float64(strategy.RegionHeight) * impreciseY), //3
	}
}

func TestBrain_GetActiveRegion(t *testing.T) {
	aldair := Dummy{}
	aldair.Player = new(client.Player)
	PlayerNumber = "3"

	aldair.TeamState = strategy.UnderPressure
	assert.Equal(t, strategy.RegionCode{0, 1}, aldair.GetActiveRegion())

	aldair.TeamState = strategy.Defensive
	assert.Equal(t, strategy.RegionCode{1, 1}, aldair.GetActiveRegion())

	PlayerNumber = "8"

	aldair.TeamState = strategy.UnderPressure
	assert.Equal(t, strategy.RegionCode{1, 2}, aldair.GetActiveRegion())

	aldair.TeamState = strategy.OnAttack
	assert.Equal(t, strategy.RegionCode{5, 2}, aldair.GetActiveRegion())
}

func TestBrain_myCurrentRegion(t *testing.T) {
	aldair := Dummy{}
	aldair.Player = new(client.Player)
	TeamPlace = arena.HomeTeam
	PlayerNumber = "3"

	aldair.Player.Coords = findImpreciseRegionPoint(3.4, 2.1)

	assert.Equal(t, strategy.RegionCode{3, 2}, aldair.myCurrentRegion())

	aldair.Player.Coords = findImpreciseRegionPoint(4.2, 0.1)

	assert.Equal(t, strategy.RegionCode{4, 0}, aldair.myCurrentRegion())

	TeamPlace = arena.AwayTeam

	aldair.Player.Coords = findImpreciseRegionPoint(4.2, 0.1)

	assert.Equal(t, strategy.RegionCode{3, 3}, aldair.myCurrentRegion())

}

func TestBrain_isItInMyActiveRegion(t *testing.T) {
	aldair := Dummy{}
	aldair.Player = new(client.Player)
	aldair.TeamState = strategy.OnAttack
	PlayerNumber = "5"
	TeamPlace = arena.HomeTeam

	assert.True(t, aldair.isItInMyActiveRegion(findImpreciseRegionPoint(4.2, 3.1), strategy.OnAttack))

	assert.False(t, aldair.isItInMyActiveRegion(findImpreciseRegionPoint(3.2, 3.1), strategy.OnAttack))

	assert.False(t, aldair.isItInMyActiveRegion(findImpreciseRegionPoint(4.2, 2.1), strategy.OnAttack))

}

func TestDetermineMyTeamState_NoBall(t *testing.T) {
	msg := client.GameMessage{}
	msg.GameInfo = client.GameInfo{}
	msg.GameInfo.Ball = client.Ball{}

	TeamPlace = arena.HomeTeam

	TeamBallPossession = arena.AwayTeam

	mockCtrl := mock.NewMockController(t)
	ctx := NewMockTurnContext(mockCtrl)
	ctx.EXPECT().GameMsg().Return(&msg).AnyTimes()
	ctx.EXPECT().Player().Return(new(client.Player)).AnyTimes()

	msg.GameInfo.Ball.Coords = strategy.RegionCode{0, 2}.Center(arena.HomeTeam)
	assert.Equal(t, string(strategy.UnderPressure), string(strategy.DetermineMyTeamState(ctx, arena.HomeTeam)))

	msg.GameInfo.Ball.Coords = strategy.RegionCode{1, 1}.Center(arena.HomeTeam)
	assert.Equal(t, string(strategy.UnderPressure), string(strategy.DetermineMyTeamState(ctx, arena.HomeTeam)))

	msg.GameInfo.Ball.Coords = strategy.RegionCode{2, 1}.Center(arena.HomeTeam)
	assert.Equal(t, string(strategy.UnderPressure), string(strategy.DetermineMyTeamState(ctx, arena.HomeTeam)))

	msg.GameInfo.Ball.Coords = strategy.RegionCode{3, 1}.Center(arena.HomeTeam)
	assert.Equal(t, string(strategy.Defensive), string(strategy.DetermineMyTeamState(ctx, arena.HomeTeam)))

	msg.GameInfo.Ball.Coords = strategy.RegionCode{4, 1}.Center(arena.HomeTeam)
	assert.Equal(t, string(strategy.Defensive), string(strategy.DetermineMyTeamState(ctx, arena.HomeTeam)))

	msg.GameInfo.Ball.Coords = strategy.RegionCode{5, 1}.Center(arena.HomeTeam)
	assert.Equal(t, string(strategy.Neutral), string(strategy.DetermineMyTeamState(ctx, arena.HomeTeam)))

	msg.GameInfo.Ball.Coords = strategy.RegionCode{6, 1}.Center(arena.HomeTeam)
	assert.Equal(t, string(strategy.Neutral), string(strategy.DetermineMyTeamState(ctx, arena.HomeTeam)))

	msg.GameInfo.Ball.Coords = strategy.RegionCode{7, 1}.Center(arena.HomeTeam)
	assert.Equal(t, string(strategy.Offensive), string(strategy.DetermineMyTeamState(ctx, arena.HomeTeam)))

}
