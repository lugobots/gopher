// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/lugobots/client-player-go (interfaces: GamerCtx,TurnContext)

// Package dummy is a generated GoMock package.
package dummy

import (
	gomock "github.com/golang/mock/gomock"
	client_player_go "github.com/lugobots/client-player-go"
	logrus "github.com/sirupsen/logrus"
	reflect "reflect"
	time "time"
)

// MockGamerCtx is a mock of GamerCtx interface
type MockGamerCtx struct {
	ctrl     *gomock.Controller
	recorder *MockGamerCtxMockRecorder
}

// MockGamerCtxMockRecorder is the mock recorder for MockGamerCtx
type MockGamerCtxMockRecorder struct {
	mock *MockGamerCtx
}

// NewMockGamerCtx creates a new mock instance
func NewMockGamerCtx(ctrl *gomock.Controller) *MockGamerCtx {
	mock := &MockGamerCtx{ctrl: ctrl}
	mock.recorder = &MockGamerCtxMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockGamerCtx) EXPECT() *MockGamerCtxMockRecorder {
	return m.recorder
}

// CreateTurnContext mocks base method
func (m *MockGamerCtx) CreateTurnContext(arg0 client_player_go.GameMessage) client_player_go.TurnContext {
	ret := m.ctrl.Call(m, "CreateTurnContext", arg0)
	ret0, _ := ret[0].(client_player_go.TurnContext)
	return ret0
}

// CreateTurnContext indicates an expected call of CreateTurnContext
func (mr *MockGamerCtxMockRecorder) CreateTurnContext(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTurnContext", reflect.TypeOf((*MockGamerCtx)(nil).CreateTurnContext), arg0)
}

// Deadline mocks base method
func (m *MockGamerCtx) Deadline() (time.Time, bool) {
	ret := m.ctrl.Call(m, "Deadline")
	ret0, _ := ret[0].(time.Time)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// Deadline indicates an expected call of Deadline
func (mr *MockGamerCtxMockRecorder) Deadline() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Deadline", reflect.TypeOf((*MockGamerCtx)(nil).Deadline))
}

// Done mocks base method
func (m *MockGamerCtx) Done() <-chan struct{} {
	ret := m.ctrl.Call(m, "Done")
	ret0, _ := ret[0].(<-chan struct{})
	return ret0
}

// Done indicates an expected call of Done
func (mr *MockGamerCtxMockRecorder) Done() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Done", reflect.TypeOf((*MockGamerCtx)(nil).Done))
}

// Err mocks base method
func (m *MockGamerCtx) Err() error {
	ret := m.ctrl.Call(m, "Err")
	ret0, _ := ret[0].(error)
	return ret0
}

// Err indicates an expected call of Err
func (mr *MockGamerCtxMockRecorder) Err() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Err", reflect.TypeOf((*MockGamerCtx)(nil).Err))
}

// Logger mocks base method
func (m *MockGamerCtx) Logger() *logrus.Entry {
	ret := m.ctrl.Call(m, "Logger")
	ret0, _ := ret[0].(*logrus.Entry)
	return ret0
}

// Logger indicates an expected call of Logger
func (mr *MockGamerCtxMockRecorder) Logger() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Logger", reflect.TypeOf((*MockGamerCtx)(nil).Logger))
}

// Value mocks base method
func (m *MockGamerCtx) Value(arg0 interface{}) interface{} {
	ret := m.ctrl.Call(m, "Value", arg0)
	ret0, _ := ret[0].(interface{})
	return ret0
}

// Value indicates an expected call of Value
func (mr *MockGamerCtxMockRecorder) Value(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Value", reflect.TypeOf((*MockGamerCtx)(nil).Value), arg0)
}

// MockTurnContext is a mock of TurnContext interface
type MockTurnContext struct {
	ctrl     *gomock.Controller
	recorder *MockTurnContextMockRecorder
}

// MockTurnContextMockRecorder is the mock recorder for MockTurnContext
type MockTurnContextMockRecorder struct {
	mock *MockTurnContext
}

// NewMockTurnContext creates a new mock instance
func NewMockTurnContext(ctrl *gomock.Controller) *MockTurnContext {
	mock := &MockTurnContext{ctrl: ctrl}
	mock.recorder = &MockTurnContextMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTurnContext) EXPECT() *MockTurnContextMockRecorder {
	return m.recorder
}

// Deadline mocks base method
func (m *MockTurnContext) Deadline() (time.Time, bool) {
	ret := m.ctrl.Call(m, "Deadline")
	ret0, _ := ret[0].(time.Time)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// Deadline indicates an expected call of Deadline
func (mr *MockTurnContextMockRecorder) Deadline() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Deadline", reflect.TypeOf((*MockTurnContext)(nil).Deadline))
}

// Done mocks base method
func (m *MockTurnContext) Done() <-chan struct{} {
	ret := m.ctrl.Call(m, "Done")
	ret0, _ := ret[0].(<-chan struct{})
	return ret0
}

// Done indicates an expected call of Done
func (mr *MockTurnContextMockRecorder) Done() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Done", reflect.TypeOf((*MockTurnContext)(nil).Done))
}

// Err mocks base method
func (m *MockTurnContext) Err() error {
	ret := m.ctrl.Call(m, "Err")
	ret0, _ := ret[0].(error)
	return ret0
}

// Err indicates an expected call of Err
func (mr *MockTurnContextMockRecorder) Err() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Err", reflect.TypeOf((*MockTurnContext)(nil).Err))
}

// GameMsg mocks base method
func (m *MockTurnContext) GameMsg() *client_player_go.GameMessage {
	ret := m.ctrl.Call(m, "GameMsg")
	ret0, _ := ret[0].(*client_player_go.GameMessage)
	return ret0
}

// GameMsg indicates an expected call of GameMsg
func (mr *MockTurnContextMockRecorder) GameMsg() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GameMsg", reflect.TypeOf((*MockTurnContext)(nil).GameMsg))
}

// Logger mocks base method
func (m *MockTurnContext) Logger() *logrus.Entry {
	ret := m.ctrl.Call(m, "Logger")
	ret0, _ := ret[0].(*logrus.Entry)
	return ret0
}

// Logger indicates an expected call of Logger
func (mr *MockTurnContextMockRecorder) Logger() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Logger", reflect.TypeOf((*MockTurnContext)(nil).Logger))
}

// Player mocks base method
func (m *MockTurnContext) Player() *client_player_go.Player {
	ret := m.ctrl.Call(m, "Player")
	ret0, _ := ret[0].(*client_player_go.Player)
	return ret0
}

// Player indicates an expected call of Player
func (mr *MockTurnContextMockRecorder) Player() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Player", reflect.TypeOf((*MockTurnContext)(nil).Player))
}

// Value mocks base method
func (m *MockTurnContext) Value(arg0 interface{}) interface{} {
	ret := m.ctrl.Call(m, "Value", arg0)
	ret0, _ := ret[0].(interface{})
	return ret0
}

// Value indicates an expected call of Value
func (mr *MockTurnContextMockRecorder) Value(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Value", reflect.TypeOf((*MockTurnContext)(nil).Value), arg0)
}
